close all;
clear all;

%% Set the parameters for the packet

mac_meta.a = '32';       % which physical packet are we using: '00' = short packet, '32' = basic packet, '00j' = low capacity packet, '80' = high capacity packet
mac_meta.K = 0;          % in which slot (0 - 23) should the packet be transmitted
mac_meta.L = 0;          % which half slot should be used for the packet (0 for first; 1 for second)
mac_meta.M = 0;          % which RF channel
mac_meta.N = 1;          % Radio fixed Part Number (RPN)
mac_meta.s = 0;          % synchronization field (0 = normal length, 1 = prolonged)   
mac_meta.z = 0;          % z-field indicator, for coliision detection (0 = no Z field, 1 = Z Field active)

tx = dect_tx();
rx = dect_rx(tx.mac_meta, 1);
ch                      = lib_rf_channel.rf_channel();
ch.verbose              = verbose;
ch.verbose_cp           = tx.phy_4_5.numerology.N_b_CP*tx.mac_meta.oversampling;
ch.type                 = 'rician';
ch.amp                  = 1.0;
ch.noise                = true;
ch.snr_db             	= 20;
%ch.spectrum_occupied    = tx.phy_4_5.n_spectrum_occupied/tx.mac_meta.oversampling;
ch.N_TX                	= 1;
ch.N_RX               	= 1;
ch.awgn_random_source   = 'global';
ch.awgn_randomstream 	= RandStream('mt19937ar','Seed', randi(1e9,[1 1]));
ch.d_sto                = 0;
ch.d_cfo               	= 0;
ch.d_err_phase         	= 0;
ch.r_random_source      = 'global';
ch.r_seed    	        = randi(1e9,[1 1]);
ch.r_sto                = 0;
ch.r_cfo                = 0;
ch.r_err_phase          = 0;
ch.r_samp_rate        	= tx.packet_data.SamplingRate;
ch.r_max_doppler     	= 1.946;                            % 1.946 19.458
ch.r_type   	        = 'TDL-v';
ch.r_DS_desired         = 10^(-7.03 + 0.00*randn(1,1));
ch.r_K                  = db2pow(9.0 + 0.00*randn(1,1));    %93e-9;
ch.r_interpolation      = true;
ch.r_gains_active 	    = true;
ch.init_rayleigh_rician_channel();

